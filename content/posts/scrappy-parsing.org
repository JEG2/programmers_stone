#+title: Scrappy Parsing
#+author: JEG2
#+date: <2024-09-20 Fri>
#+draft: true

FIXME

# more

* FIXME

FIXME

#+begin_src elixir :session none
  Mix.install([
    {:exqlite, "~> 0.23.0"},
    {:faker, "~> 0.18.0"}
  ])

  db_path = Path.join(System.tmp_dir!(), "db.sqlite3")
  {:ok, conn} = Exqlite.Sqlite3.open(db_path)

  :ok =
    Exqlite.Sqlite3.execute(conn, """
    CREATE TABLE people (
      id INTEGER PRIMARY KEY,
      name TEXT NOT NULL,
      age INTEGER NOT NULL,
      email TEXT NOT NULL
    );

    CREATE UNIQUE INDEX person_email ON people(email);
    """)

  {:ok, statement} =
    Exqlite.Sqlite3.prepare(
      conn,
      "INSERT INTO people (name, age, email) VALUES (?1, ?2, ?3)"
    )

  Stream.repeatedly(fn ->
    name = Faker.Person.name()

    account =
      name
      |> String.downcase()
      |> String.replace(~r{[^a-z]+}, "_")
      |> String.replace(~r{_\z}, "")

    [name, Enum.random(10..100//1), "#{account}@#{Faker.Internet.domain_name()}"]
  end)
  |> Stream.take(150)
  |> Enum.each(fn values ->
    :ok = Exqlite.Sqlite3.bind(conn, statement, values)
    :done = Exqlite.Sqlite3.step(conn, statement)
  end)

  :ok = Exqlite.Sqlite3.release(conn, statement)

  IO.puts("Database path:  #{db_path}")
#+end_src

#+RESULTS:
: Database path:  /var/folders/5z/kjv_k0597pj0qml6qfd8y97h0000gn/T/db.sqlite3
: :ok

FIXME

#+begin_example
sqlite> SELECT * FROM people LIMIT 10;
1|Abdullah Raynor|98|abdullah_raynor@mills.net
2|Mrs. Rickie Kovacek|26|mrs_rickie_kovacek@champlin.biz
3|Dolly Jakubowski MD|24|dolly_jakubowski_md@mclaughlin.name
4|Lura McDermott|80|lura_mcdermott@bernhard.info
5|Irwin Kertzmann|81|irwin_kertzmann@senger.biz
6|Dawson Lockman|48|dawson_lockman@homenick.net
7|Darwin Schmidt|70|darwin_schmidt@powlowski.org
8|Isobel Carroll|18|isobel_carroll@huel.info
9|Jaclyn Bogan IV|35|jaclyn_bogan_iv@wunsch.com
10|Miss Cathy Runte IV|55|miss_cathy_runte_iv@oconnell.net
sqlite> SELECT * FROM people WHERE age >= 97;
1|Abdullah Raynor|98|abdullah_raynor@mills.net
88|Brooklyn Stark|97|brooklyn_stark@steuber.info
142|Mrs. Odessa Ryan DDS|98|mrs_odessa_ryan_dds@dicki.com
sqlite> SELECT * FROM people WHERE id = 77;
77|Briana Cassin|80|briana_cassin@mitchell.biz
sqlite> SELECT * FROM people WHERE email = 'mrs_odessa_ryan_dds@dicki.com';
142|Mrs. Odessa Ryan DDS|98|mrs_odessa_ryan_dds@dicki.com
#+end_example

FIXME

#+begin_src elixir :session none
  File.open!(db_path, [:read, :binary], fn f ->
    <<"SQLite format 3\0"::binary,
      raw_page_size::integer-big-unit(8)-size(2),
      1::integer-big-unit(8)-size(1),
      1::integer-big-unit(8)-size(1),
      0::integer-big-unit(8)-size(1),
      64::integer-big-unit(8)-size(1),
      32::integer-big-unit(8)-size(1),
      32::integer-big-unit(8)-size(1),
      file_change_counter::integer-big-unit(8)-size(4),
      page_count::integer-big-unit(8)-size(4),
      _first_freelist_trunk_page::integer-big-unit(8)-size(4),
      _freelist_pages::integer-big-unit(8)-size(4),
      _schema_cookie::integer-big-unit(8)-size(4),
      4::integer-big-unit(8)-size(4),
      _default_page_cache_size::integer-big-unit(8)-size(4),
      _largest_root_page_for_vacuum::integer-big-unit(8)-size(4),
      1::integer-big-unit(8)-size(4),
      _user_version::integer-big-unit(8)-size(4),
      0::integer-big-unit(8)-size(4),
      _application_id::integer-big-unit(8)-size(4),
      0::integer-big-unit(8)-size(20),
      file_change_counter::integer-big-unit(8)-size(4),
      3_046_000::integer-big-unit(8)-size(4)>> = IO.binread(f, 100)

    page_size =
      case raw_page_size do
        1 -> 65_536
        _ -> raw_page_size
      end

    %{page_size: page_size, page_count: page_count}
  end)
#+end_src

#+RESULTS:
: %{page_count: 7, page_size: 4096}

FIXME

#+begin_src elixir :session none
  parse_header = fn bytes, f ->
    <<"SQLite format 3\0",
      raw_page_size::2*8,
      1::1*8,
      1::1*8,
      0::1*8,
      64::1*8,
      32::1*8,
      32::1*8,
      file_change_counter::4*8,
      page_count::4*8,
      _first_freelist_trunk_page::4*8,
      _freelist_pages::4*8,
      _schema_cookie::4*8,
      4::4*8,
      _default_page_cache_size::4*8,
      _largest_root_page_for_vacuum::4*8,
      1::4*8,
      _user_version::4*8,
      0::4*8,
      _application_id::4*8,
      0::20*8,
      file_change_counter::4*8,
      3_046_000::4*8>> = bytes

    page_size =
      case raw_page_size do
        1 -> 65_536
        _ -> raw_page_size
      end

    %{file: f, page_size: page_size, page_count: page_count}
  end

  open_db = fn path, func ->
    File.open!(path, [:read, :binary], fn f ->
      db =
        f
        |> IO.binread(100)
        |> parse_header.(f)

      func.(db)
    end)
  end

  open_db.(db_path, &Function.identity/1)
#+end_src

#+RESULTS:
: %{file: #PID<0.172.0>, page_count: 7, page_size: 4096}

FIXME

#+begin_src elixir :session none
  parse_page = fn bytes, i ->
    start = if i == 1, do: 100, else: 0
  
    <<raw_type::1*8, _first_page_freeblock::2*8, cell_count::2*8, _raw_cell_content_start::2*8,
      _fragmented_free_bytes::1*8, rest::binary>> = binary_slice(bytes, start, 12)
  
    type =
      case raw_type do
        2 -> :interior_index
        5 -> :interior_table
        10 -> :leaf_index
        13 -> :leaf_table
      end
  
    right_most_pointer =
      if type in [:interior_index, :interior_table] do
        <<right_most_pointer::4*8>> = rest
        right_most_pointer
      else
        nil
      end
  
    %{
      index: i,
      start: start,
      type: type,
      cell_count: cell_count,
      right_most_pointer: right_most_pointer
    }
  end
  
  read_page = fn %{page_count: last_page} = db, i when i > 0 and i <= last_page ->
    :file.position(db.file, (i - 1) * db.page_size)
  
    db.file
    |> IO.binread(db.page_size)
    |> parse_page.(i)
  end
  
  open_db.(db_path, fn db ->
    Enum.map(1..3//1, fn i ->
      read_page.(db, i)
    end)
  end)
#+end_src

#+RESULTS:
#+begin_example
[
  %{
    index: 1,
    start: 100,
    type: :leaf_table,
    cell_count: 2,
    right_most_pointer: nil
  },
  %{
    index: 2,
    start: 0,
    type: :interior_table,
    cell_count: 1,
    right_most_pointer: 5
  },
  %{
    index: 3,
    start: 0,
    type: :interior_index,
    cell_count: 1,
    right_most_pointer: 7
  }
]
#+end_example

FIXME

#+begin_src elixir :session none
  parse_varint = fn bytes, start ->
    Enum.reduce_while(0..8, {0, 0}, fn offset, {int, size} ->
      <<high_bit::1, new_int::7>> = binary_part(bytes, start + offset, 1)
  
      cond do
        size == 8 -> {:halt, {Bitwise.bsl(int, 8) + new_int, size + 1}}
        high_bit == 0 -> {:halt, {Bitwise.bsl(int, 7) + new_int, size + 1}}
        true -> {:cont, {Bitwise.bsl(int, 7) + new_int, size + 1}}
      end
    end)
  end
  
  parse_cells = fn bytes, page ->
    cell_start = page.start + if is_nil(page.right_most_pointer), do: 8, else: 12
  
    cells =
      0..(page.cell_count - 1)//1
      |> Enum.map(fn i ->
        <<content_start::2*8>> = binary_part(bytes, i * 2 + cell_start, 2)
        content_start
      end)
      |> Enum.map(fn content_start ->
        case page.type do
          :interior_index ->
            <<left_child_pointer::4*8>> = binary_part(bytes, content_start, 4)
            {payload_bytes, p_size} = parse_varint.(bytes, content_start + 4)
  
            {
              left_child_pointer,
              binary_part(bytes, content_start + 4 + p_size, payload_bytes)
            }
  
          :interior_table ->
            <<left_child_pointer::4*8>> = binary_part(bytes, content_start, 4)
            {integer_key, _size} = parse_varint.(bytes, content_start + 4)
            {left_child_pointer, integer_key}
  
          :leaf_index ->
            {payload_bytes, p_size} = parse_varint.(bytes, content_start)
            binary_part(bytes, content_start + p_size, payload_bytes)
  
          :leaf_table ->
            {payload_bytes, p_size} = parse_varint.(bytes, content_start)
            {rowid, i_size} = parse_varint.(bytes, content_start + p_size)
  
            {
              rowid,
              binary_part(bytes, content_start + p_size + i_size, payload_bytes)
            }
        end
      end)
  
    Map.put(page, :cells, cells)
  end
  
  read_page = fn %{page_count: last_page} = db, i when i > 0 and i <= last_page ->
    :file.position(db.file, (i - 1) * db.page_size)
  
    bytes = IO.binread(db.file, db.page_size)
    page = parse_page.(bytes, i)
    parse_cells.(bytes, page)
  end
  
  open_db.(db_path, fn db -> read_page.(db, 1) end)
#+end_src

#+RESULTS:
#+begin_example
%{
  index: 1,
  start: 100,
  type: :leaf_table,
  cell_count: 2,
  right_most_pointer: nil,
  cells: [
    {1,
     <<7, 23, 25, 25, 1, 129, 119, 116, 97, 98, 108, 101, 112, 101, 111, 112,
       108, 101, 112, 101, 111, 112, 108, 101, 2, 67, 82, 69, 65, 84, 69, 32,
       84, 65, 66, 76, 69, 32, 112, 101, 111, ...>>},
    {2,
     <<6, 23, 37, 25, 1, 111, 105, 110, 100, 101, 120, 112, 101, 114, 115, 111,
       110, 95, 101, 109, 97, 105, 108, 112, 101, 111, 112, 108, 101, 3, 67, 82,
       69, 65, 84, 69, 32, 85, 78, 73, ...>>}
  ]
}
#+end_example

FIXME

#+begin_src elixir :session none
  parse_record = fn bytes ->
    {header_bytes, h_size} = parse_varint.(bytes, 0)
  
    h_size
    |> Stream.unfold(fn read_bytes ->
      if read_bytes < header_bytes do
        {column, c_size} = parse_varint.(bytes, read_bytes)
        {column, read_bytes + c_size}
      else
        nil
      end
    end)
    |> Enum.to_list()
    |> Enum.map_reduce(header_bytes, fn
      0, read_bytes ->
        {nil, read_bytes}
  
      1, read_bytes ->
        <<int::1*8>> = binary_part(bytes, read_bytes, 1)
        {int, read_bytes + 1}
  
      2, read_bytes ->
        <<int::2*8>> = binary_part(bytes, read_bytes, 2)
        {int, read_bytes + 2}
  
      3, read_bytes ->
        <<int::3*8>> = binary_part(bytes, read_bytes, 3)
        {int, read_bytes + 3}
  
      4, read_bytes ->
        <<int::4*8>> = binary_part(bytes, read_bytes, 4)
        {int, read_bytes + 4}
  
      5, read_bytes ->
        <<int::6*8>> = binary_part(bytes, read_bytes, 6)
        {int, read_bytes + 6}
  
      6, read_bytes ->
        <<int::8*8>> = binary_part(bytes, read_bytes, 8)
        {int, read_bytes + 8}
  
      7, read_bytes ->
        <<flt::8*8>> = binary_part(bytes, read_bytes, 8)
        {flt, read_bytes + 8}
  
      8, read_bytes ->
        {0, read_bytes}
  
      9, read_bytes ->
        {1, read_bytes}
  
      n, read_bytes when n >= 12 and rem(n, 2) == 0 ->
        size = div(n - 12, 2)
        text = binary_part(bytes, read_bytes, size)
        {text, read_bytes + size}
  
      n, read_bytes when n >= 13 and rem(n, 2) == 1 ->
        size = div(n - 13, 2)
        text = binary_part(bytes, read_bytes, size)
        {text, read_bytes + size}
    end)
    |> elem(0)
  end
  
  read_page = fn %{page_count: last_page} = db, i when i > 0 and i <= last_page ->
    :file.position(db.file, (i - 1) * db.page_size)
  
    bytes = IO.binread(db.file, db.page_size)
    page = parse_page.(bytes, i)
    page = parse_cells.(bytes, page)
  
    Map.update!(page, :cells, fn cells ->
      Enum.map(cells, fn
        bytes when is_binary(bytes) -> parse_record.(bytes)
        {other, bytes} when is_binary(bytes) -> {other, parse_record.(bytes)}
        cell -> cell
      end)
    end)
  end
  
  open_db.(db_path, fn db -> read_page.(db, 1) end)
#+end_src

#+RESULTS:
#+begin_example
%{
  index: 1,
  start: 100,
  type: :leaf_table,
  cell_count: 2,
  right_most_pointer: nil,
  cells: [
    {1,
     ["table", "people", "people", 2,
      "CREATE TABLE people (\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  age INTEGER NOT NULL,\n  email TEXT NOT NULL\n)"]},
    {2,
     ["index", "person_email", "people", 3,
      "CREATE UNIQUE INDEX person_email ON people(email)"]}
  ]
}
#+end_example

FIXME

#+begin_src elixir :session none
  open_db.(db_path, fn db -> read_page.(db, 2) end)
#+end_src

#+RESULTS:
#+begin_example
%{
  index: 2,
  start: 0,
  type: :interior_table,
  cell_count: 1,
  right_most_pointer: 5,
  cells: [{4, 80}]
}
#+end_example

FIXME

#+begin_src elixir :session none
  open_db.(db_path, fn db -> read_page.(db, 3) end)
#+end_src

#+RESULTS:
#+begin_example
%{
  index: 3,
  start: 0,
  type: :interior_index,
  cell_count: 1,
  right_most_pointer: 7,
  cells: [{6, ["lizzie_barrows@morar.org", 7]}]
}
#+end_example

FIXME

#+begin_src elixir :session none
  open_db.(db_path, fn db -> read_page.(db, 6) end)
#+end_src

#+RESULTS:
#+begin_example
%{
  index: 6,
  start: 0,
  type: :leaf_index,
  cell_count: 79,
  right_most_pointer: nil,
  cells: [
    ["adan_white@thiel.info", 62],
    ["addie_dickens@turner.org", 71],
    ["adeline_bashirian@runte.com", 135],
    ["adrianna_rowe@buckridge.com", 81],
    ["agnes_zulauf@sanford.info", 80],
    ["alanis_conroy_i@farrell.com", 39],
    ["alia_sauer@welch.name", 34],
    ["amiya_hane@lang.name", 105],
    ["aracely_rolfson@boehm.info", 125],
    ["ashlynn_rath@gaylord.com", 137],
    ["asia_shanahan@conroy.name", 52],
    ["barry_kuhn@hauck.net", 134],
    ["bethel_davis_jr@walsh.name", 26],
    ["betsy_howell@boyer.org", 113],
    ["brandy_parker@lesch.biz", 88],
    ["cali_reinger@wiza.biz", 20],
    ["carey_rowe_phd@blick.biz", 13],
    ["carmelo_o_reilly_sr@jones.com", 136],
    ["carmen_brown@bernier.net", 107],
    ["carole_senger@okuneva.com", 83],
    ["chester_rice@feeney.com", 60],
    ["clair_connelly@nienow.net", 49],
    ["clay_quigley@mills.biz", 47],
    ["cleora_hickle@streich.com", 3],
    ["connie_anderson@west.biz", 31],
    ["cory_reynolds@cruickshank.org", 66],
    ["courtney_stiedemann@kirlin.org", 54],
    ["creola_rippin@williamson.com", 17],
    ["cristobal_ledner@quitzon.name", 89],
    ["cullen_mann@heidenreich.org", 11],
    ["damion_dach_ii@kutch.info", 94],
    ["davin_streich@heathcote.com", 149],
    ["dee_beatty@schneider.com", 43],
    ["dejuan_ratke@padberg.com", 120],
    ["dejuan_sporer@davis.info", 33],
    ["delpha_funk@corkery.info", 129],
    ["dennis_waelchi@kemmer.name", 139],
    ["deron_wisozk@wintheiser.biz", 27],
    ["domenica_sporer_iv@cronin.name", 138],
    ["donato_hudson_md@oconner.com", 61],
    ["dorthy_connelly@lynch.name", 28],
    ["dr_gudrun_kub@mcclure.info", 59],
    ["dr_luz_donnelly_dds@gaylord.net", ...],
    [...],
    ...
  ]
}
#+end_example
