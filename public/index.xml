<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Programmer&#39;s Stone</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on The Programmer&#39;s Stone</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What will it cost to carry and remove this dependency?</title>
      <link>http://localhost:1313/posts/what-will-it-cost-to-carry-and-remove-this-dependancy/</link>
      <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/what-will-it-cost-to-carry-and-remove-this-dependancy/</guid>
      <description>&lt;p&gt;&#xA;This article is part of the series &lt;a href=&#34;https://programmersstone.blog/posts/jeg2s-questions/&#34;&gt;JEG2&amp;#39;s Questions&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;I&amp;#39;ve built a lot of applications with a lot of teams.  I&amp;#39;ve seen a lot of the problems with software development.  There are two problems that I&amp;#39;ve seen so often that I believe they are worth looking out for at all times.  The first of those is the accumulation of high cost dependencies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What are we afraid of?</title>
      <link>http://localhost:1313/posts/what-are-we-afraid-of/</link>
      <pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/what-are-we-afraid-of/</guid>
      <description>&lt;p&gt;&#xA;This article is part of the series &lt;a href=&#34;https://programmersstone.blog/posts/jeg2s-questions/&#34;&gt;JEG2&amp;#39;s Questions&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;One of the lessons I learned during my time in management is that it was far more important for me to worry about creating environments where good work could get done than it was to spend my effort directly doing the work.  As one person, the maximum I could contribute was whatever my upper capacity was.  However, if I could improve the work environment to give the team a boost, their future efforts would be increased relative to the size of the team.  They could accomplish more than I could ever hope to.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Which leaves just one question:  what is the ideal work environment?&lt;/p&gt;</description>
    </item>
    <item>
      <title>How will we know it works?</title>
      <link>http://localhost:1313/posts/how-will-we-know-it-works/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/how-will-we-know-it-works/</guid>
      <description>&lt;p&gt;&#xA;This article is part of the series &lt;a href=&#34;https://programmersstone.blog/posts/jeg2s-questions/&#34;&gt;JEG2&amp;#39;s Questions&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;As programmers, our primary function is to achieve Product&amp;#39;s roadmap.  We will into existence the features Product believes will move the product forward.  However, how we do that matters.  It can be easy to fall into the trap of just blindly grinding through as many tickets as possible, but that&amp;#39;s not truly as helpful to the business as it might seem at first glance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JEG2&#39;s Questions</title>
      <link>http://localhost:1313/posts/jeg2s-questions/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/jeg2s-questions/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/My_System&#34;&gt;My System&lt;/a&gt; by &lt;a href=&#34;https://en.wikipedia.org/wiki/Aron_Nimzowitsch&#34;&gt;Aron Nimzowitsch&lt;/a&gt; was one of the early chess books that had a big impact on me.  The first part of the book, called &lt;em&gt;The Elements&lt;/em&gt;, is where Nimzowitsch lays out the specific criteria he is monitoring to evaluate chess games.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Do I have any open files?  Have I created any passed pawns?  Am I pressing the attack on the back ranks?  This tells Nimzowitsch and his readers that a chess game where they have managed to create a passed pawn on an open file that they control and push it to the seventh rank is probably going pretty well for them.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;That&amp;#39;s chess.  Let&amp;#39;s talk about programming…&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scrappy Parsing</title>
      <link>http://localhost:1313/posts/scrappy-parsing/</link>
      <pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/scrappy-parsing/</guid>
      <description>&lt;p&gt;&#xA;I love parsing!  I really do.  There&amp;#39;s something very satisfying about converting input into usable data structures that help me accomplish some task.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Parsing is important.  How well we construct those data structures and the quality of the structures we choose can massively impact the work that comes after.  We should probably all be &lt;a href=&#34;https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/&#34;&gt;worrying about parsing&lt;/a&gt; a little more than we do.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The good news is that Elixir is the best language I have ever worked with for doing serious parsing.  Let&amp;#39;s prove it.  Let&amp;#39;s pull the data out of a SQLite database file using vanilla Elixir and some tricks from my &lt;a href=&#34;https://voyagesincode.com/products/how-to-train-your-scrappy-programmer&#34;&gt;Scrappy Programmer Livebook series&lt;/a&gt;.  (You don&amp;#39;t need to have read that to follow along with this article.  Everyone is welcome.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Junior Pairing Scripts</title>
      <link>http://localhost:1313/posts/junior_pairing_scripts/</link>
      <pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/junior_pairing_scripts/</guid>
      <description>&lt;p&gt;&#xA;When there&amp;#39;s a large skill gap between two or more pairing developers, it can become a frustrating experience for everyone involved.  I suspect this happens more often when more junior folks are at the keyboard.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Experienced developers have learned a high level language to communicate with their peers about problems that their less skilled partners may not yet be fluent in.  If they are forced to downgrade from, &amp;#34;Let&amp;#39;s make a map,&amp;#34; to, &amp;#34;Type a percent sign followed by an opening curly brace,&amp;#34; they are now operating with one brain tied behind their back.  That&amp;#39;s the simple stuff too.  &lt;a href=&#34;https://en.wikipedia.org/wiki/Rope_(data_structure)&#34;&gt;Rope data structures&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Schwartzian_transform&#34;&gt;Schwartzian transforms&lt;/a&gt;, and &lt;a href=&#34;https://hexdocs.pm/elixir/genservers.html&#34;&gt;adding a custom GenServer to the application&amp;#39;s supervision tree&lt;/a&gt; are right out!&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The junior is not in a better position.  They often feel like their job is to understand as much as possible of what the other person is doing to learn from it.  Of course, it&amp;#39;s common for most problems to quickly exceed their capacity for taking things in and, once they are overwhelmed, it&amp;#39;s easy to feel like they can&amp;#39;t bring any knowledge they&amp;#39;ve acquired to bear in a useful manner.  It&amp;#39;s totally understandable if they essentially shut down in such circumstances.  The hope of learning is no longer on the table.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The good news is that I believe there is a better and easier way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Math Not Required</title>
      <link>http://localhost:1313/posts/math-not-required/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/math-not-required/</guid>
      <description>&lt;p&gt;&#xA;There&amp;#39;s an age old debate in programming about whether or not there&amp;#39;s a lot of math involved.  Do you need to be a math geek to become a good programmer?&lt;/p&gt;&#xA;&lt;p&gt;&#xA;At the risk of spoiling this entire article:  I don&amp;#39;t think you do.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Why do I say that and what do I think this debate is really about?  That I won&amp;#39;t spoil…&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;&#xA;This blog represents one programmer&amp;#39;s quest for enlightenment by attempting to turn (mostly &lt;a href=&#34;https://elixir-lang.org/&#34;&gt;Elixir&lt;/a&gt;) code into gold.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Easier Recursion</title>
      <link>http://localhost:1313/posts/easier-recursion/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/easier-recursion/</guid>
      <description>&lt;p&gt;&#xA;I definitely understand the sentiment behind the L. Peter Deutsch quote, &amp;#34;To iterate is human, to recurse divine.&amp;#34;  I enjoy an elegant recursive solution as much as other programmers, but lately I&amp;#39;ve been playing with another style of coding up similar needs that might just be easier and more flexible.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
